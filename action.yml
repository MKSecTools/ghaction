name: 'Snyk Report for README'
description: 'Goes through JSON of Snyk SAST and SCA reports and updates the status on the README'
runs:
  using: 'composite'
  steps:
    - run: |
        #!/bin/bash
        set -x

        echo $BASH_VERSION

        #----------------------
        # Helper functions
        #----------------------

        # Function to strip ANSI color codes
        strip_ansi() {
            sed 's/\x1b\[[0-9;]*m//g'
        }

        #----------------------
        # File paths
        #----------------------
        SNYK_SAST_FILE="${GITHUB_WORKSPACE}/snyk_sast.json"
        SNYK_SCA_FILE="${GITHUB_WORKSPACE}/snyk_sca.json"
        README_FILE="${GITHUB_WORKSPACE}/README.md"

        #----------------------
        # Initialize counters
        #----------------------
        
        # We’ll keep separate counters for SAST and SCA
        declare -A SAST_counters=( ["Critical"]=0 ["High"]=0 ["Medium"]=0 ["Low"]=0 )
        declare -A SCA_counters=( ["Critical"]=0 ["High"]=0 ["Medium"]=0 ["Low"]=0 )

        #----------------------
        # Process SAST file
        #----------------------
        while IFS= read -r line; do
            # Remove ANSI color codes
            clean_line=$(echo "$line" | strip_ansi)
            # We assume lines with vulnerabilities begin with "✗ " 
            # and have the severity as the next word
            if [[ $clean_line == ✗\ * ]]; then
                severity=$(echo $clean_line | awk '{print $2}')
                # Increment the appropriate severity counter for SAST
                SAST_counters[$severity]=$(( ${SAST_counters[$severity]} + 1 ))
            fi
        done < "$SNYK_SAST_FILE"

        #----------------------
        # Process SCA file
        #----------------------
        while IFS= read -r line; do
            # Remove ANSI color codes
            clean_line=$(echo "$line" | strip_ansi)
            if [[ $clean_line == ✗\ * ]]; then
                severity=$(echo $clean_line | awk '{print $2}')
                # Increment the appropriate severity counter for SCA
                SCA_counters[$severity]=$(( ${SCA_counters[$severity]} + 1 ))
            fi
        done < "$SNYK_SCA_FILE"

        #----------------------
        # Prepare the badge content
        #----------------------
        badge_content="<!-- BADGES START -->\n"

        # Optional heading
        badge_content+="## Snyk SAST Vulnerabilities\n"

        # Create badges for SAST
        for severity in Critical High Medium Low; do
            count=${SAST_counters[$severity]}
            color="lightgrey"
            case $severity in
                Critical) color="red" ;;
                High) color="orange" ;;
                Medium) color="yellow" ;;
                Low) color="green" ;;
            esac

            if [[ $count -gt 0 ]]; then
                badge_content+="![SAST - ${severity}](https://img.shields.io/badge/SAST--${severity}-${count}-${color}?style=flat-square&logo=snyk)\n"
            fi
        done

        badge_content+="\n## Snyk SCA Vulnerabilities\n"

        # Create badges for SCA
        for severity in Critical High Medium Low; do
            count=${SCA_counters[$severity]}
            color="lightgrey"
            case $severity in
                Critical) color="red" ;;
                High) color="orange" ;;
                Medium) color="yellow" ;;
                Low) color="green" ;;
            esac

            if [[ $count -gt 0 ]]; then
                badge_content+="![SCA - ${severity}](https://img.shields.io/badge/SCA--${severity}-${count}-${color}?style=flat-square&logo=snyk)\n"
            fi
        done

        badge_content+="<!-- BADGES END -->\n"

        #----------------------
        # Insert/update badges in README
        #----------------------
        if grep -q "<!-- BADGES START -->" "$README_FILE"; then
            # Remove old badge section
            sed -i.bak '/<!-- BADGES START -->/,/<!-- BADGES END -->/d' "$README_FILE"

            # Prepend new badge content
            echo -e "$badge_content$(cat "$README_FILE")" > "$README_FILE"
        else
            # Badge section doesn't exist, just prepend
            echo -e "$badge_content$(cat "$README_FILE")" > "$README_FILE"
        fi
      shell: bash
